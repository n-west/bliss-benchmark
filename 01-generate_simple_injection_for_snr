#!/usr/bin/env python3

import os
os.environ['SETIGEN_ENABLE_GPU'] = '1'
os.environ['CUDA_VISIBLE_DEVICES'] = '0'

from astropy import units as u

import setigen as stg


import argparse

parser = argparse.ArgumentParser(description="generate hdf5 filterbank files from voltages with given noise distribution and a single injected signal")
parser.add_argument('-n', '--std', type=float, dest='v_std', required=True,
                    help='Standard deviation value')

parser.add_argument('-a', '--amplitude', type=float, dest='amplitude', default=0.1,
                    help='Amplitude value (default: 0.1)')

parser.add_argument('-d', '--drift', type=float, dest='drift', default=2.0,
                    help='Drift value (default: 0.0)')

args = parser.parse_args()

v_std = args.v_std
amplitude = args.amplitude
drift = args.drift

sample_rate = 3e9 / 256
num_taps = 12
num_branches = 1024 // 256

chan_bw = sample_rate / num_branches

digitizer = stg.voltage.RealQuantizer(target_fwhm=32,
                                      num_bits=8)

filterbank = stg.voltage.PolyphaseFilterbank(num_taps=num_taps,
                                             num_branches=num_branches)

requantizer = stg.voltage.ComplexQuantizer(target_fwhm=32,
                                           num_bits=8)

num_pols = 1
antenna = stg.voltage.Antenna(sample_rate=sample_rate,
                              fch1=6*u.GHz,
                              ascending=True,
                              num_pols=num_pols,
                              seed=42)

# The docs example uses this
antenna.x.add_noise(v_mean=0,
                    v_std=v_std)

antenna.x.add_constant_signal(f_start=6000.3e6,
                              drift_rate=-2*u.Hz/u.s,
                              level=0.002)

# # the notebook example uses this
# for stream in antenna.streams:
#     stream.add_noise(v_mean=0,
#                      v_std=v_std)

rvb = stg.voltage.RawVoltageBackend(antenna,
                                    digitizer=digitizer,
                                    filterbank=filterbank,
                                    requantizer=requantizer,
                                    start_chan=0,
                                    num_chans=1,
                                    block_size=32*6*2097152,
                                    blocks_per_file=128,
                                    num_subblocks=4)

fname = f'test_v_std{v_std}_pols{num_pols}'
rvb.record(output_file_stem=fname,
           num_blocks=1, 
           length_mode='num_blocks',
           header_dict={'TELESCOP': 'GBT'},
           verbose=True)


